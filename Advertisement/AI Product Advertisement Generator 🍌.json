{
  "name": "AI Product Advertisement Generator üçå",
  "nodes": [
    {
      "parameters": {
        "formTitle": "AI Product Advertisement Generator",
        "formDescription": "Transform your product images into professional advertisements with AI-powered models. Powered by Google Gemini Nano üçå",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Product Image",
              "fieldType": "file",
              "multipleFiles": false,
              "acceptFileTypes": ".jpg, .jpeg, .png, .webp",
              "requiredField": true
            },
            {
              "fieldLabel": "Model Type",
              "fieldType": "dropdown",
              "fieldOptions": {
                "values": [
                  {
                    "option": "Male Model"
                  },
                  {
                    "option": "Female Model"
                  },
                  {
                    "option": "Diverse/Any"
                  }
                ]
              },
              "requiredField": true
            },
            {
              "fieldLabel": "Advertisement Style (Optional)",
              "fieldType": "dropdown",
              "fieldOptions": {
                "values": [
                  {
                    "option": "Professional"
                  },
                  {
                    "option": "Casual"
                  },
                  {
                    "option": "Lifestyle"
                  },
                  {
                    "option": "Studio"
                  },
                  {
                    "option": "Outdoor"
                  }
                ]
              }
            },
            {
              "fieldLabel": "Additional Instructions (Optional)",
              "fieldType": "textarea",
              "requiredField": false
            }
          ]
        },
        "options": {
          "appendAttribution": false,
          "buttonLabel": "Generate Advertisement ‚ú®",
          "formSubmittedText": "Processing your image... This may take 10-30 seconds."
        }
      },
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.2,
      "position": [
        240,
        400
      ],
      "id": "42aa6ec4-6cfb-418f-a31a-844ef6870c31",
      "name": "Product Upload Form",
      "webhookId": "3b255328-041e-4e2e-bca8-176e9846ac7e",
      "notesInFlow": true,
      "notes": "Receives product image and preferences from user"
    },
    {
      "parameters": {
        "jsCode": "// Extract and process the generated image from API response\nconst response = $input.item.json;\n\n// Check if response has the expected structure\nif (!response.choices || !response.choices[0] || !response.choices[0].message) {\n  throw new Error('Invalid API response structure');\n}\n\nconst message = response.choices[0].message;\nlet imageUrl = null;\n\n// Try to extract image from different possible response formats\nif (message.images && message.images[0] && message.images[0].image_url) {\n  imageUrl = message.images[0].image_url.url;\n} else if (message.content && Array.isArray(message.content)) {\n  const imageContent = message.content.find(c => c.type === 'image_url');\n  if (imageContent && imageContent.image_url) {\n    imageUrl = imageContent.image_url.url;\n  }\n} else if (typeof message.content === 'string' && message.content.includes('data:image')) {\n  imageUrl = message.content;\n}\n\nif (!imageUrl) {\n  throw new Error('No image URL found in API response');\n}\n\n// Extract base64 data and MIME type\nconst [header, base64Data] = imageUrl.split(',');\nconst mimeType = header.split(':')[1].split(';')[0];\nconst extension = mimeType.split('/')[1] || 'png';\n\n// Generate filename with timestamp\nconst timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, -5);\nconst fileName = `product-ad-${timestamp}.${extension}`;\n\nreturn [{\n  json: {\n    base64: base64Data,\n    mimeType: mimeType,\n    fileName: fileName,\n    fullDataUrl: imageUrl\n  }\n}];",
        "onError": "continueErrorOutput"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1440,
        400
      ],
      "id": "e0f74ffe-df13-47bc-a7a9-ef9e1b53f661",
      "name": "Process AI Response",
      "notesInFlow": true,
      "notes": "Extracts and validates generated image from API response"
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "base64",
        "options": {
          "mimeType": "={{ $json.mimeType }}",
          "fileName": "={{ $json.fileName }}"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        1640,
        400
      ],
      "id": "9adba7f4-44db-4598-b248-e84cf60840b8",
      "name": "Convert to Download",
      "notesInFlow": true,
      "notes": "Converts base64 to binary file for download"
    },
    {
      "parameters": {
        "operation": "binaryToPropery",
        "binaryPropertyName": "Product_Image",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        440,
        400
      ],
      "id": "b69deac9-3191-4a1f-9df7-6a1812fb689f",
      "name": "Extract Image Data",
      "notesInFlow": true,
      "notes": "Extracts base64 data from uploaded image file"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": "",
            "typeValidation": "loose"
          },
          "conditions": [
            {
              "id": "validate-image",
              "leftValue": "={{ $json.data }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        640,
        400
      ],
      "id": "validate-image-node",
      "name": "Validate Image",
      "notesInFlow": true,
      "notes": "Ensures image data exists before processing"
    },
    {
      "parameters": {
        "jsCode": "// Prepare image data for AI model\nconst items = $input.all();\n\nconst updatedItems = items.map((item) => {\n  const base64Data = item?.json?.data;\n  \n  if (!base64Data) {\n    throw new Error('No image data found');\n  }\n  \n  // Detect image format from base64 data\n  let mimeType = 'image/png';\n  if (base64Data.startsWith('/9j/')) {\n    mimeType = 'image/jpeg';\n  } else if (base64Data.startsWith('iVBORw')) {\n    mimeType = 'image/png';\n  } else if (base64Data.startsWith('UklGR')) {\n    mimeType = 'image/webp';\n  }\n  \n  const dataUrl = `data:${mimeType};base64,${base64Data}`;\n  \n  return {\n    json: {\n      imageUrl: dataUrl,\n      mimeType: mimeType,\n      imageSize: base64Data.length\n    }\n  };\n});\n\nreturn updatedItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        840,
        400
      ],
      "id": "13e6ff65-5bbd-4724-a6e4-0f1d52dca7ab",
      "name": "Prepare Image URL",
      "notesInFlow": true,
      "notes": "Converts base64 to data URL with proper MIME type detection"
    },
    {
      "parameters": {
        "operation": "completion",
        "respondWith": "returnBinary",
        "completionTitle": "‚ú® Advertisement Generated Successfully!",
        "completionMessage": "Your professional product advertisement has been created and will download automatically. The image features your product with an AI-generated model in a professional setting.\n\nüí° Tips:\n- Use this image in your social media campaigns\n- Perfect for online product listings\n- Suitable for digital advertising\n\nPowered by Google Gemini Nano üçå",
        "options": {}
      },
      "type": "n8n-nodes-base.form",
      "typeVersion": 1,
      "position": [
        1840,
        400
      ],
      "id": "cf9b77d0-3172-4bdf-b7a9-7c35144a6aa6",
      "name": "Deliver Result",
      "webhookId": "60191061-42cf-4116-ba6a-a93931099c53",
      "notesInFlow": true,
      "notes": "Returns generated advertisement to user with download"
    },
    {
      "parameters": {
        "operation": "completion",
        "respondWith": "text",
        "completionTitle": "‚ö†Ô∏è Generation Failed",
        "completionMessage": "We encountered an error generating your advertisement. This could be due to:\n\n- Invalid image format\n- Image too large (try under 5MB)\n- API rate limits\n- Temporary service issues\n\nPlease try again with a different image or contact support if the issue persists.",
        "options": {}
      },
      "type": "n8n-nodes-base.form",
      "typeVersion": 1,
      "position": [
        1640,
        600
      ],
      "id": "error-form-node",
      "name": "Error Response",
      "webhookId": "60191061-42cf-4116-ba6a-a93931099c53",
      "notesInFlow": true,
      "notes": "Shows error message if generation fails"
    },
    {
      "parameters": {
        "jsCode": "// Build dynamic prompt based on user selections\nconst formData = $('Product Upload Form').item.json;\nconst modelType = formData['Model Type'] || 'Diverse/Any';\nconst style = formData['Advertisement Style (Optional)'] || 'Professional';\nconst additionalInstructions = formData['Additional Instructions (Optional)'] || '';\n\n// Map model type to prompt-friendly text\nconst modelMapping = {\n  'Male Model': 'a professional male model',\n  'Female Model': 'a professional female model',\n  'Diverse/Any': 'a diverse, professional model'\n};\n\nconst selectedModel = modelMapping[modelType] || 'a professional model';\n\n// Build comprehensive prompt\nlet prompt = `Generate a high-quality, photorealistic advertisement image featuring ${selectedModel} actively using or showcasing this product. \n\n`;\n\nprompt += `Style: ${style} advertisement\n`;\nprompt += `Setting: Choose an appropriate ${style.toLowerCase()} environment that complements the product\n\n`;\n\nprompt += `Requirements:\n`;\nprompt += `- The model should appear natural, engaged, and genuinely using/displaying the product\n`;\nprompt += `- Maintain the exact product design, colors, branding, and details from the reference image\n`;\nprompt += `- Create professional lighting and composition suitable for commercial advertising\n`;\nprompt += `- Ensure the product is clearly visible and positioned as the focal point\n`;\nprompt += `- The model should express positive emotions (happy, confident, satisfied)\n`;\nprompt += `- Background should be contextually appropriate but not distracting\n`;\nprompt += `- High resolution, commercial-quality output\n\n`;\n\nif (additionalInstructions) {\n  prompt += `Additional requirements: ${additionalInstructions}\n\n`;\n}\n\nprompt += `Create a compelling, sales-focused image that would work perfectly in digital advertising campaigns.`;\n\nreturn [{\n  json: {\n    prompt: prompt,\n    imageUrl: $json.imageUrl\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1040,
        400
      ],
      "id": "build-prompt-node",
      "name": "Build AI Prompt",
      "notesInFlow": true,
      "notes": "Creates dynamic prompt based on user preferences"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://openrouter.ai/api/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openRouterApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"google/gemini-2.0-flash-exp:free\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"type\": \"text\",\n          \"text\": \"{{ $json.prompt }}\"\n        },\n        {\n          \"type\": \"image_url\",\n          \"image_url\": {\n            \"url\": \"{{ $json.imageUrl }}\"\n          }\n        }\n      ]\n    }\n  ],\n  \"temperature\": 0.7,\n  \"max_tokens\": 4096\n}",
        "options": {
          "timeout": 60000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1240,
        400
      ],
      "id": "b627e7a3-f07b-4f9b-aadb-a7b8ee2a6379",
      "name": "Google Gemini Nano üçå",
      "credentials": {
        "openRouterApi": {
          "id": "393kOAsHfUJpG8EB",
          "name": "OpenRouter account"
        }
      },
      "notesInFlow": true,
      "notes": "Generates advertisement image using Google Gemini 2.0 Flash"
    },
    {
      "parameters": {
        "content": "# üçå AI Product Advertisement Generator\n\n**Powered by Google Gemini Nano (2.0 Flash)**\n\nTransform simple product images into professional advertisements featuring AI-generated models in realistic settings.",
        "height": 240,
        "width": 1920,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        160,
        240
      ],
      "id": "288fd023-d62c-4bb4-a82f-a49dc39f55b6",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "---\n\n# ÔøΩ Quick Setup Guide\n\n## Prerequisites\n1. **OpenRouter Account** - [Sign up at openrouter.ai](https://openrouter.ai/)\n2. **API Credits** - Ensure you have credits for Google Gemini model\n3. **n8n Instance** - Self-hosted or cloud\n\n## Setup Steps\n\n### 1Ô∏è‚É£ Configure OpenRouter Credentials\n- Click on **\"Google Gemini Nano üçå\"** node\n- Add your OpenRouter API credentials\n- The workflow uses the free tier: `google/gemini-2.0-flash-exp:free`\n\n### 2Ô∏è‚É£ Customize Form (Optional)\n- Edit **\"Product Upload Form\"** node\n- Adjust accepted file types (currently: .jpg, .jpeg, .png, .webp)\n- Modify dropdown options for model types and styles\n- Customize form title and description\n\n### 3Ô∏è‚É£ Adjust AI Prompt (Optional)\n- Open **\"Build AI Prompt\"** node\n- Modify the prompt template for different styles\n- Add industry-specific requirements\n- Customize output specifications\n\n### 4Ô∏è‚É£ Test the Workflow\n- Activate the workflow\n- Open the form URL from **\"Product Upload Form\"**\n- Upload a product image\n- Select preferences (model type, style)\n- Click \"Generate Advertisement\"\n\n### 5Ô∏è‚É£ Customize Output\n- Edit **\"Deliver Result\"** node for custom completion message\n- Modify download filename format in **\"Process AI Response\"**\n- Add watermarking or branding (optional)\n\n## üí° Pro Tips\n- **Best Results**: Use clear, well-lit product images with simple backgrounds\n- **Image Size**: Keep images under 5MB for optimal processing\n- **File Formats**: PNG and JPEG work best\n- **Processing Time**: Generation takes 10-45 seconds depending on complexity\n- **Cost**: Using free tier saves costs but may have rate limits\n\n## üîß Customization Options\n\n**Change AI Model**: Update model name in API request\n- `google/gemini-2.0-flash-exp:free` (current, free)\n- `google/gemini-pro-vision` (more powerful, paid)\n- `google/gemini-ultra-vision` (highest quality, paid)\n\n**Add More Form Fields**:\n- Background color/setting preferences\n- Product category selection\n- Brand guidelines input\n- Output resolution options\n\n**Error Handling**:\n- Workflow includes validation and error responses\n- Failed generations show user-friendly error messages\n- Check execution logs for debugging\n\n---\n\n‚ú® **Once configured, you'll have a production-ready advertisement generator!**",
        "height": 1040,
        "width": 640
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        160,
        -840
      ],
      "id": "8ee789d2-81dc-4d25-a792-e46448f0c812",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## üé• Video Tutorial\n\n[![Google Gemini Nano with n8n](https://img.youtube.com/vi/UGf01FYaAzY/maxresdefault.jpg)](https://youtu.be/UGf01FYaAzY?si=xaO5N1xeXotZ0tYN)\n\n**Click to watch the complete setup tutorial**\n\n---\n\n## üìä Workflow Flow\n\n1Ô∏è‚É£ **User uploads product image** via form\n2Ô∏è‚É£ **Extract & validate** image data\n3Ô∏è‚É£ **Prepare** image URL with MIME detection\n4Ô∏è‚É£ **Build dynamic prompt** based on preferences\n5Ô∏è‚É£ **AI generates** advertisement with model\n6Ô∏è‚É£ **Process & convert** to downloadable file\n7Ô∏è‚É£ **Deliver** result to user\n\n---\n\n## ‚ú® Features\n\n‚úÖ Multiple model types (Male/Female/Diverse)\n‚úÖ 5 advertisement styles\n‚úÖ Custom instructions support\n‚úÖ Automatic MIME type detection\n‚úÖ Error handling & validation\n‚úÖ Timestamped filenames\n‚úÖ Professional prompt engineering\n‚úÖ Free tier compatible",
        "height": 720,
        "width": 560
      },
      "id": "d2a21307-97b9-49e8-bebe-36d4be8405f7",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        860,
        -840
      ],
      "typeVersion": 1
    }
  ],
  "pinData": {},
  "connections": {
    "Product Upload Form": {
      "main": [
        [
          {
            "node": "Extract Image Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Image Data": {
      "main": [
        [
          {
            "node": "Validate Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Image": {
      "main": [
        [
          {
            "node": "Prepare Image URL",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Image URL": {
      "main": [
        [
          {
            "node": "Build AI Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build AI Prompt": {
      "main": [
        [
          {
            "node": "Google Gemini Nano üçå",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Nano üçå": {
      "main": [
        [
          {
            "node": "Process AI Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process AI Response": {
      "main": [
        [
          {
            "node": "Convert to Download",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to Download": {
      "main": [
        [
          {
            "node": "Deliver Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "executionTimeout": 300,
    "timezone": "America/New_York"
  },
  "versionId": "11ea2c53-5d02-4008-836f-3b67bee93b10",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "125e3b631be5af75b5d8304f7125cd5c84e5ea96c148171cca4bfb3fcc88fe9b"
  },
  "id": "S1ljxgDqXGEf3jTi",
  "tags": [
    {
      "createdAt": "2025-10-02T00:00:00.000Z",
      "updatedAt": "2025-10-02T00:00:00.000Z",
      "id": "ai-image-generation",
      "name": "AI Image Generation"
    },
    {
      "createdAt": "2025-10-02T00:00:00.000Z",
      "updatedAt": "2025-10-02T00:00:00.000Z",
      "id": "google-gemini",
      "name": "Google Gemini"
    },
    {
      "createdAt": "2025-10-02T00:00:00.000Z",
      "updatedAt": "2025-10-02T00:00:00.000Z",
      "id": "product-photography",
      "name": "Product Photography"
    },
    {
      "createdAt": "2025-10-02T00:00:00.000Z",
      "updatedAt": "2025-10-02T00:00:00.000Z",
      "id": "marketing",
      "name": "Marketing"
    }
  ]
}
